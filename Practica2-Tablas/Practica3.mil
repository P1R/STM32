_Conf_ptos:
  begin   (midx: 0)
//Practica3.c,33 :: 		void Conf_ptos(void)
_Conf_ptos:
  begin   (midx: 0)
//Practica3.c,35 :: 		GPIO_Digital_Input(&GPIOB_BASE,_GPIO_PINMASK_0 | _GPIO_PINMASK_1 | _GPIO_PINMASK_2);
	R1 <4> <- 7   (midx: 0)
	R0 <4> <- #GPIOB_BASE   (midx: 0)
	CALL _GPIO_Digital_Input   (midx: 0)
//Practica3.c,36 :: 		GPIO_Digital_Output(&GPIOA_BASE, _GPIO_PINMASK_0 | _GPIO_PINMASK_1 | _GPIO_PINMASK_2 | _GPIO_PINMASK_3 | _GPIO_PINMASK_4 | _GPIO_PINMASK_5 | _GPIO_PINMASK_6);
	R1 <4> <- 127   (midx: 0)
	R0 <4> <- #GPIOA_BASE   (midx: 0)
	CALL _GPIO_Digital_Output   (midx: 0)
//Practica3.c,37 :: 		GPIO_Digital_Output(&GPIOC_BASE, _GPIO_PINMASK_0);
	R1 <4> <- 1   (midx: 0)
	R0 <4> <- #GPIOC_BASE   (midx: 0)
	CALL _GPIO_Digital_Output   (midx: 0)
  end
   (midx: 0)
_Inicializa:
  begin   (midx: 0)
//Practica3.c,40 :: 		void  Inicializa(void)
_Inicializa:
  begin   (midx: 0)
//Practica3.c,42 :: 		SALIDAS = APAGADO;
	R1 <4> <- 255   (midx: 0)
	R0 <4> <- addr(GPIOA_ODR)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//Practica3.c,43 :: 		onda=0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(onda)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
  end
   (midx: 0)
_Proceso:
  begin   (midx: 0)
//Practica3.c,46 :: 		void Proceso(void)
_Proceso:
  begin   (midx: 0)
//Practica3.c,48 :: 		SALIDAS = nivel[ENTRADAS&0x07];
	R0 <4> <- addr(GPIOB_IDR)   (midx: 0)
	R0 <4> <- [R0]   (midx: 0)
	R1 <4> <-  R0 & 7   (midx: 2)
	R0 <4> <- #_nivel   (midx: 0)
	R0 <4> <-  R0 + R1   (midx: 2)
	R1 <1> <- *R0   (midx: 0)
	R0 <4> <- addr(GPIOA_ODR)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
  end
   (midx: 0)
_main:
  begin   (midx: 0)
//Practica3.c,20 :: 		void main() {
_main:
  begin   (midx: 0)
//Practica3.c,21 :: 		Conf_ptos();
	CALL _Conf_ptos   (midx: 0)
//Practica3.c,22 :: 		Inicializa();
	CALL _Inicializa   (midx: 0)
//Practica3.c,23 :: 		while(1)
0:   (midx: 0)
//Practica3.c,25 :: 		for(i=0; i<1000; i++)
	R1 <2> <- 0   (midx: 0)
	R0 <4> <- addr(_i)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
2:   (midx: 0)
	R0 <4> <- addr(_i)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	if ( R0 >= 1000) then goto 3   (midx: 5)
//Practica3.c,27 :: 		Proceso();
	CALL _Proceso   (midx: 0)
//Practica3.c,25 :: 		for(i=0; i<1000; i++)
	R1 <4> <- addr(_i)   (midx: 0)
	R0 <2> <- [R1]   (midx: 0)
	R0 <2> <-  R0 + 1   (midx: 1)
	[R1] <2> <- R0   (midx: 0)
//Practica3.c,28 :: 		}
	goto	2   (midx: 0)
3:   (midx: 0)
//Practica3.c,29 :: 		onda=~onda; //COMPLEMENTA EL BIT
	R1 <4> <- addr(onda)   (midx: 0)
	R0 <4> <- [R1]   (midx: 0)
	R0 <1> <- ~R0   (midx: 20)
	[R1] <0> <- R0   (midx: 0)
//Practica3.c,30 :: 		}
	goto	0   (midx: 0)
  end
   (midx: 0)
